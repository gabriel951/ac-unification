% File that contain auxiliar specification for nominalunif.pvs.
aux_nominal_unif: THEORY 
BEGIN

IMPORTING	  substitution,
		  structure_extra[[variable,term]],
		  structure_extra[term], 
		  tuples, 
		  atoms

	Delta, Delta1, Delta_sol, Nabla, Nabla1: VAR fresh_context
	sigma, sigma_sol, sigma1, gamma, theta, lambda1: VAR Sub
	t, t1, t2, s, s1, s2, u: VAR term
	X, Y: VAR variable
	a: VAR atom
	i, n: VAR nat
	arg: VAR list[term]
	sym: VAR string
	
% TODO: see if i've used all this variables i've defined
% A fix point equation type is a permutation and a variable 
fix_pnt_eq_typ: TYPE = [perm, variable]
fix_pnt_eq: VAR fix_pnt_eq_typ                  % I'll need a variable of type fix point equation
fix_pnt_eq_lst, fix_pnt_eq_lst1, fix_pnt_eq_lst2, fix_pnt_eq_lst_sol: VAR list[fix_pnt_eq_typ]

% a unification problem type is a list containing the two terms to be unified
unif_prb: VAR unif_prb_typ
unif_prb_lst, unif_prb_lst1, unif_prb_lst2, unif_prb_lst_sol: VAR list[unif_prb_typ]

% a nominal solution type is a list consisting of (fresh context, substitution, list[fix_point_equations]) 
nominal_sol_typ:  TYPE = [fresh_context, Sub, list[fix_pnt_eq]]
nominal_sol: VAR nominal_sol_typ

% variables needed to specify algorithm
sol: VAR nominal_sol_typ
sol_lst: VAR list[nominal_sol_typ]
lst_lst_sol: VAR list[list[nominal_sol_typ]]
y: VAR [fresh_context, Sub, list[unif_prb_typ], list[fix_pnt_eq]]

%%%%%%%%%%% end of preliminar definitions


%%%%%%%%%%% useful definitions and functions for c_unify
% is every pair (t, s) in the unification problem list such that t = s (alfa-equivalent)  
alpha_eq_lst?(Delta, unif_prb_lst): RECURSIVE bool =
IF null?(unif_prb_lst) THEN TRUE
ELSE LET t = car(unif_prb_lst)`1,
     	 s = car(unif_prb_lst)`2 IN 
	 IF alpha(Delta)(t, s) THEN alpha_eq_lst?(Delta, cdr(unif_prb_lst))
	 ELSE FALSE
	 ENDIF 
ENDIF
MEASURE unif_prb_lst BY << 

% applies a substitution to a list of unification problems. Apply substitution to every term in unification problem list
% return the resulting unification problem list 
apply_sub_prb_lst(sigma, unif_prb_lst): RECURSIVE list[unif_prb_typ] =
IF null?(unif_prb_lst) THEN (::)
ELSE LET t = car(unif_prb_lst)`1,
     	 s = car(unif_prb_lst)`2,
	 new_t = Subs(sigma)(t),
	 new_s = Subs(sigma)(s),
	 new_unif_prb = (:(new_t, new_s):) 
	 IN append(new_unif_prb, apply_sub_prb_lst(sigma, cdr(unif_prb_lst)))
ENDIF
MEASURE unif_prb_lst BY <<          



% get set of different variables in a list of terms
% this functions build on the work of function Vars
vars_lst(unif_prb_lst): RECURSIVE finite_set[variable] =
IF null?(unif_prb_lst) THEN (::)
ELSE LET t = car(unif_prb_lst)`1,
     	 s = car(unif_prb_lst)`2
	 IN union(vars_lst(cdr(unif_prb_lst)), union(Vars(t), Vars(s)))
ENDIF
MEASURE unif_prb_lst BY << 

% get sum of size of every term in the list of terms
size_lst(unif_prb_lst): RECURSIVE nat =
IF null?(unif_prb_lst) THEN 0
ELSE LET t = car(unif_prb_lst)`1
     	 IN size(t) + size_lst(cdr(unif_prb_lst))
ENDIF
MEASURE unif_prb_lst BY << 

% convert a list of fix point equations in a list of unification problems
fix_pnt2unif_prb(fix_pnt_eq_lst): RECURSIVE list[unif_prb_typ] =
IF null?(fix_pnt_eq_lst) THEN (::)
ELSE LET fix_pnt_eq = car(fix_pnt_eq_lst),
     	 perm = fix_pnt_eq`1, 
	 variable = fix_pnt_eq`2,
	 t = *(perm, variable), 
	 s = *((::), variable),
	 unif_prb = (:(t, s):)
	 IN append(unif_prb, fix_pnt2unif_prb(cdr(fix_pnt_eq_lst)))
ENDIF
MEASURE fix_pnt_eq_lst BY << 

% defines a valid quadruple. Valid quadruples are what occur in the algorithm 
valid_quadruple?(Delta, sigma, unif_prb_lst, fix_pnt_eq_lst): bool =
   % well - behaved substitution
   well_behaved?(sigma)  
   AND 
   % Dom(sigma) and Vars(Problem) are disjoint
   disjoint?(vars_dom_sub(sigma), vars_lst(append(unif_prb_lst, fix_pnt2unif_prb(fix_pnt_eq_lst))))

% returns a boolean indicating if the pair (Nabla, sigma) is a solution to a
% problem quadruple (Delta, gamma, unif_prb_lst, fix_pnt_eq_lst) 
sol_prb_quad?(Nabla, sigma)(Delta, gamma, unif_prb_lst, fix_pnt_eq_lst): bool =
    % Nabla |- Delta sigma
    fresh_subs(Nabla)(sigma, Delta) AND
    % Nabla |- s(sigma) = t(sigma), for all s and t in the unification problem list
    alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, unif_prb_lst)) AND
    % Nabla |- (pi X)sigma = (pi' X)sigma, for all fix point equations in the list
    alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, fix_pnt2unif_prb(fix_pnt_eq_lst))) AND 
    % gamma is more general than sigma under the context Nabla
    more_gen_sub?(Nabla)(gamma, sigma)

% get list of parameters to call function unify
get_lst_param2call_unify(unif_prb_lst1, Delta, sigma, unif_prb_lst, fix_pnt_eq_lst):
RECURSIVE list[[fresh_context, Sub, list[unif_prb_typ], list[fix_pnt_eq_typ]]] =
    IF null?(unif_prb_lst1) THEN (::)
    ELSE cons((Delta, sigma, cons(car(unif_prb_lst1), unif_prb_lst), fix_pnt_eq_lst),
    	 	     get_lst_param2call_unify(cdr(unif_prb_lst1), Delta, sigma, unif_prb_lst, fix_pnt_eq_lst))
    ENDIF 
MEASURE unif_prb_lst1 BY << 

% flatten list of list of solutions obtained, to just a list of solutions
flatten_lst_results(lst_lst_sol): RECURSIVE  list[nominal_sol_typ] =
    IF null?(lst_lst_sol) THEN (::)
    ELSE append(car(lst_lst_sol), flatten_lst_results(cdr(lst_lst_sol)))
    ENDIF
MEASURE lst_lst_sol BY << 

% apply a substitution X -> u to arg, the arguments of an AC function t
% flattens the results
apply_subs_arg(X, u)(arg, (t | ac_app?(t))): RECURSIVE list[term] =
   IF null?(arg) THEN (::)
   ELSE LET s = subs(X, u)(car(arg)) IN
   	    append(term2list_withoutAC(s, ac_sym(t)), apply_subs_arg(X, u)(cdr(arg), t))
   ENDIF 
MEASURE arg BY << 

%%%%%%%%%% end of useful functions 
%%%%%%%%%% lemmas related to the auxiliar functions above
% Vars(l1 U l2) = Vars(l1) U Vars(l2)
vars_lst_append: LEMMA
   vars_lst(append(unif_prb_lst1, unif_prb_lst2)) = union(vars_lst(unif_prb_lst1), vars_lst(unif_prb_lst2))  

% Vars(Psigma) <= Vars(Im(sigma)) U Vars(P)
vars_lst_sub_subset: LEMMA
   subset?(vars_lst(apply_sub_prb_lst(sigma, unif_prb_lst)), union(vars_range_sub(sigma), vars_lst(unif_prb_lst)))

% auxiliar lemmas to the apply_sub_elim_var:
apply_sub_elim_var_term_aux: LEMMA
   (member(X, vars_dom_sub((:(Y,s):))) AND (NOT member(X, vars_range_sub((:(Y, s):))))) =>
   NOT member(X, Vars(subs(Y,s)(t)))

% X in Dom(Sub) AND X not in Range(Sub) => X not in Vars(tSub) 
apply_sub_elim_var_term: LEMMA
   (member(X, vars_dom_sub(sigma)) AND (NOT member(X, vars_range_sub(sigma)))) =>
   NOT member(X, Vars(Subs(sigma)(t)))
    
% X in Dom(Sub) AND X not in Range(Sub) => X not in (Vars(P*Sub)))
apply_sub_elim_var: LEMMA
   (member(X, vars_dom_sub(sigma)) AND (NOT member(X, vars_range_sub(sigma)))) =>
   NOT member(X, vars_lst(apply_sub_prb_lst(sigma, unif_prb_lst)))

% apply_sub (sigma, l1 + l2) = apply_sub(sigma, l1) + apply_sub(sigma, l2)
apply_sub_prb_lst_append: LEMMA
   apply_sub_prb_lst(sigma, append(unif_prb_lst1, unif_prb_lst2)) =
   append(apply_sub_prb_lst(sigma, unif_prb_lst1), apply_sub_prb_lst(sigma, unif_prb_lst2))

% l1 + l2 is alpha-equivalent under a context IFF (l1 AND l2 are alpha-equivalent under the context) 
alpha_eq_lst?_append: LEMMA
   alpha_eq_lst?(Delta, append(unif_prb_lst1, unif_prb_lst2)) IFF
   (alpha_eq_lst?(Delta, unif_prb_lst1) AND alpha_eq_lst?(Delta, unif_prb_lst2))

% fix_pnt2unif_prb(FP1 + FP2) = fix_pnt2unif_prb(FP1) + fix_pnt2unif_prb(FP2) 
fix_pnt2unif_prb_append: LEMMA
   fix_pnt2unif_prb(append(fix_pnt_eq_lst1, fix_pnt_eq_lst2)) =
   append(fix_pnt2unif_prb(fix_pnt_eq_lst1), fix_pnt2unif_prb(fix_pnt_eq_lst2)) 

% aux lemma for the one below
apply_sub_prb_lst_cons_calls_aux: LEMMA
   (more_gen_sub?(Nabla)(sigma1, sigma) AND
   idempotent?(sigma1) AND
   alpha(Nabla)(Subs(sigma)(Subs(sigma1)(t)), Subs(sigma)(Subs(sigma1)(s)))) =>
   alpha(Nabla)(Subs(sigma)(t), Subs(sigma)(s))
   
% the idea is you can "cancel" apply_sub_prb_lst consecutive calls, for some substitutions
apply_sub_prb_lst_cons_calls: LEMMA
   (more_gen_sub?(Nabla)(sigma1, sigma) AND
   idempotent?(sigma1) AND
   alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, apply_sub_prb_lst(sigma1, unif_prb_lst)))) =>
   alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, unif_prb_lst))


% aux lemma for the one below
apply_sub_prb_lst_cons_calls_add_aux: LEMMA
   more_gen_sub?(Nabla)(sigma1, sigma) AND
   idempotent?(sigma1) AND
   alpha(Nabla)(Subs(sigma)(t), Subs(sigma)(s)) =>
   alpha(Nabla)(Subs(sigma)(Subs(sigma1)(t)), Subs(sigma)(Subs(sigma1)(s)))
   
% the idea is you can add an apply_sub_prb_lst consecutive call, for some substitutions
apply_sub_prb_lst_cons_calls_add: LEMMA
   (more_gen_sub?(Nabla)(sigma1, sigma) AND
   idempotent?(sigma1) AND
   alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, unif_prb_lst))) =>
   alpha_eq_lst?(Nabla, apply_sub_prb_lst(sigma, apply_sub_prb_lst(sigma1, unif_prb_lst)))
   
% cdr(unif_prb_lst) < unif_prb_lst
cdr_smaller_size: LEMMA
NOT null?(unif_prb_lst) => size_lst(cdr(unif_prb_lst)) < size_lst(unif_prb_lst)

%%%%%%%%%% end of lemmas related to the auxiliar functions above

%%%%%%%%%%%% lemmas for the AC case %%%%%%%%%%%%%%%%%%%%%%%%%%%


% 
ac2pair_in_gen_pairs_order1: CONJECTURE
   ac_app?(t)  
   => 
   member(ac2pair(subs(X, u)(t1), ac_sym(t)),
            gen_pairs_order(apply_subs_arg(X, u)((:t1:), t)))

%
subs_preserves_member_gen_pairs_order_aux: CONJECTURE
    ac_app?(t) AND n < length(arg)  AND NOT null?(arg) AND            
    member(t1, gen_pairs_order_nth(arg, n))
    =>
    member(ac2pair(subs(X, u)(t1), ac_sym(t)),
            gen_pairs_order(apply_subs_arg(X, u)(arg, t))) 

%
subs_preserves_member_gen_pairs_order: CONJECTURE
    ac_app?(t) AND n < num_arg_fun(t, ac_sym(t)) AND 
    member(t1, gen_pairs_order_nth(extract_arg(num_arg_fun(t, ac_sym(t)), t), n))
    =>
    member(ac2pair(subs(X, u)(t1), ac_sym(t)),
            gen_pairs_order(extract_arg(num_arg_fun(subs(X, u)(t), ac_sym(t)), t))) 


% aux lemma to terms_in_gen_unif_prb_imp_flat_sub_also_in
terms_in_gen_unif_prb_imp_flat_sub_also_in_aux1: CONJECTURE 
   ac_app?(t) AND ac_app?(s) AND ac_sym(t) = ac_sym(s) AND 
   member((t1, s1), gen_unif_prb(t, s))
   =>
   member((ac2pair(subs(X, u)(t1), ac_sym(t)), ac2pair(subs(X, u)(s1), ac_sym(s))),
   		      gen_unif_prb(subs(X, u)(t), subs(X, u)(s)))

% aux lemma to prove generate_unif_prb_is_sound
% this lemma captures the idea:
% (t1, s1) \in gen_unif_prb(t, s) => (t_1*sigma, s_1*sigma) \in gen_unif_prb(t*sigma, s*sigma)
terms_in_gen_unif_prb_imp_flat_sub_also_in: CONJECTURE
    ac_app?(t) AND ac_app?(s) AND ac_sym(t) = ac_sym(s) AND 
    member((t1, s1), gen_unif_prb(t, s)) 
    =>
    member((ac2pair(Subs(sigma)(t1), ac_sym(t)), ac2pair(Subs(sigma)(s1), ac_sym(s))),
    				     gen_unif_prb(Subs(sigma)(t), Subs(sigma)(s)))

ac2pair_preserves_alpha_equivalence: CONJECTURE
    ac_app?(t) AND ac_app?(s) AND ac_sym(t) = ac_sym(s) AND
    alpha(Delta)(Subs(sigma)(t1), Subs(sigma)(s1))
    =>
    alpha(Delta)(ac2pair(Subs(sigma)(t1), ac_sym(t)), ac2pair(Subs(sigma)(s1), ac_sym(s)))

% auxiliar lemma for generate_unif_prb_is_sound.
% basically a simpler version, where we do not have to consider substitutions
gen_unif_prb_is_sound_without_sub: CONJECTURE
    ac_app?(t) AND ac_app?(s) AND ac_sym(t) = ac_sym(s) AND 
    member((t1, s1), gen_unif_prb(t, s)) AND alpha(Delta)(t1, s1)
    =>
    alpha(Delta)(t, s)

% the core lemma needed in the proof of soundness. 
generate_unif_prb_is_sound: CONJECTURE
    ac_app?(t) AND ac_app?(s) AND ac_sym(t) = ac_sym(s) AND 
    member((t1, s1), gen_unif_prb(t, s)) AND alpha(Delta)(Subs(sigma)(t1), Subs(sigma)(s1))
    =>
    alpha(Delta)(Subs(sigma)(t), Subs(sigma)(s))

%%%%%%%%%%%%%% end of lemmas for the AC case %%%%%%%%%%%%%%%%%%


%%%%%%%%%%% auxiliar lemmas for soundness of the algorithm
% if Delta |- Nabla sigma, then Delta |- subset(Nabla) sigma
fresh_subs_subset: LEMMA
    FORALL sigma, Delta, Nabla1, Nabla: 
    (FORALL (a, X): member((a, X), Nabla1) IMPLIES member((a, X), Nabla)
    AND fresh_subs(Delta)(sigma, Nabla))
    => fresh_subs(Delta)(sigma, Nabla1)

% aux lemma for the one below
suf_cond_not_prb_lst_aux: LEMMA
   sigma = (:(X, t):) AND member(X, Vars(Subs(sigma)(s))) => member(X, Vars(t))
   
% technical, non interesting lemma
% gives a sufficient condition for a variable not in a unification problem list 
suf_cond_not_prb_lst: LEMMA 
   sigma = (:(X, t):) AND NOT member(X, Vars(t)) => NOT member(X, vars_lst(apply_sub_prb_lst(sigma, unif_prb_lst)))

% a sufficient condition for a variable to be in a unification problem list 
suf_cond_member_unif_prb_lst: LEMMA
   member(X, vars_lst(apply_sub_prb_lst(sigma, unif_prb_lst))) AND NOT member(X, vars_range_sub(sigma))
   => member(X, vars_lst(unif_prb_lst))

% trivial lemma, that will be used in the proof of the main theorem. 
valid_quadruple?_cdr: CONJECTURE
   valid_quadruple?(Delta, sigma, unif_prb_lst, fix_pnt_eq_lst) AND NOT null?(unif_prb_lst) =>
   valid_quadruple?(Delta, sigma, cdr(unif_prb_lst), fix_pnt_eq_lst) 

%%%%%%%%%%% end of auxiliar lemmas for soundness of the algorithm


END aux_nominal_unif 
