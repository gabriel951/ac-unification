%%%%
% Tuples.pvs
% This file contain the implementation of functions to deal with tuples and also necessary lemmas
% about those functions
% obs: in this file the convention is that
% IF the arguments of a term are t_1, ..., t_n THEN we start counting at 1 and finish in n.
% The only function which start counting at 0 and goes to n-1 is function nth,
% which is defined in the prelude of the PVS. 
%%%

tuples: THEORY
BEGIN
	IMPORTING nominal_term,
                  structure_extra[term], 
		  structure_extra[[term, term]]

s, s1, t, t1, t2: VAR term
sym: VAR string 
n, i: VAR nat

lst_terms, lst_terms1, lst_terms2, arg, arg1, arg2: VAR list[term]
lst_args: VAR list[list[term]]

% a unification problem type is a list containing the two terms to be unified
unif_prb_typ: TYPE = [term, term]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In this first part we define functions num_arg_fun, select_nth and delete_nth

% calculate the number of arguments a function (whose name is sym) 
% this function takes into account associativity, so it should be called (initially) using only A and AC
% function symbols
num_arg_fun(t, sym): RECURSIVE nat =
    IF pair?(t) THEN num_arg_fun(term1(t), sym) + num_arg_fun(term2(t), sym)
    ELSIF ac_app?(t) AND ac_sym(t) = sym THEN num_arg_fun(ac_arg(t), sym)
    ELSE 1
    ENDIF
MEASURE t BY << 

% select the nth element of a function (whose name is sym)
% index start at 1
% the function returns the term and also a boolean, that indicates if it was possible to find
% the nth element
select_nth(n)(t, sym): RECURSIVE term =
    IF pair?(t) THEN LET num_arg1 = num_arg_fun(term1(t), sym) IN
      	       	     IF n <= num_arg1 THEN select_nth(n)(term1(t), sym)
		     ELSE select_nth(n - num_arg1)(term2(t), sym)
		     ENDIF
    ELSIF ac_app?(t) AND ac_sym(t) = sym THEN select_nth(n)(ac_arg(t), sym)
ELSE t
ENDIF
MEASURE t BY <<

% delete the nth element of a function (whose name is sym)
% index start at 1 
delete_nth(n)(t, sym): RECURSIVE term =
IF pair?(t) THEN LET num_arg1 = num_arg_fun(term1(t), sym),
   	    	     num_arg2 = num_arg_fun(term2(t), sym) IN
		     IF n <= num_arg1 THEN
		        IF num_arg1 = 1 THEN term2(t)
			ELSE pair(delete_nth(n)(term1(t), sym), term2(t))
			ENDIF
		     ELSE
		        IF num_arg2 = 1 THEN term1(t)
			ELSE pair(term1(t), delete_nth(n - num_arg1)(term2(t), sym))
			ENDIF
		     ENDIF
ELSIF ac_app?(t) AND ac_sym(t) = sym THEN IF num_arg_fun(t, sym) = 1 THEN unit
					  ELSE ac_app(ac_sym(t), delete_nth(n)(ac_arg(t), sym))
					  ENDIF 
ELSE unit 
ENDIF
MEASURE t by <<
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In this second part, we define the necessary functions for gen_pairs_order to work

% extracts the first n arguments of an AC function symbol, putting them in a list
% should receive an AC function symbol
extract_arg(n, t): RECURSIVE list[term] =
    IF n = 0 OR NOT ac_app?(t) THEN (::) 
    ELSIF n = 1 THEN (: (select_nth(n)(t, ac_sym(t))) :)
    ELSE LET nth_elem_lst = (:(select_nth(n)(t, ac_sym(t))):) 
     	     IN append(extract_arg(n - 1, t), nth_elem_lst)
    ENDIF    
MEASURE n 

% extract from the list of terms the first n terms
get_args_le(arg, n): RECURSIVE list[term] = 
    IF null?(arg) OR n = 0 THEN (::) 
    ELSIF n = 1 THEN (:car(arg):)
    ELSE cons(car(arg), get_args_le(cdr(arg), n-1))
    ENDIF
MEASURE n 

% discard from list terms 1 up to n, keep the remaining
get_args_gt(arg, n): RECURSIVE list[term] = 
    IF null?(arg) THEN (::) 
    ELSIF n = 0 THEN arg
    ELSE get_args_gt(cdr(arg), n-1)
    ENDIF 
MEASURE n     

% get all pairs formed by t and every term on the list of terms
get_pairs_aux(t, lst_terms): RECURSIVE list[term] =
   IF null?(lst_terms) THEN (::)
   ELSE cons(pair(t, car(lst_terms)), get_pairs_aux(t, cdr(lst_terms))) 
   ENDIF
MEASURE lst_terms BY << 

% combine pairings
get_pairs(lst_terms1, lst_terms2): RECURSIVE list[term] =
   IF null?(lst_terms1) THEN (::)
   ELSE LET pairs_first_term = get_pairs_aux(car(lst_terms1), lst_terms2)
   	    IN append(pairs_first_term, get_pairs(cdr(lst_terms1), lst_terms2))
   ENDIF 	    
MEASURE lst_terms1 BY <<
 
% generate all pairings of a term (preserving the order) such that the most external
% separator happen in position 1 or 2 or 3 or ... or nth
% obs: if the separator happens in position "n" this means <(1, ..., n), (n + 1, ..., k)>
% n should be bigger than zero and less than length(arg), except when arg is an unitary list
% therefore, the order of IF and ELSIF must be respected, as I painfully learned
gen_pairs_order_nth(arg, n): RECURSIVE list[term] =
    IF length(arg) = 1 THEN arg
    ELSIF null?(arg) OR n = 0 OR n > length(arg) THEN (::) 
    ELSE LET
	    % get arguments from 1 to n in a variable and from n+1 to remaining terms in
	    % another variable
	    args_le_n = get_args_le(arg, n),
	    args_gt_n = get_args_gt(arg, n),
	    % generate all possible pairings for term1 and term2
	    pairings_term1 = gen_pairs_order_nth(args_le_n, length(args_le_n) - 1),
	    pairings_term2 = gen_pairs_order_nth(args_gt_n, length(args_gt_n) - 1), 
	    % combine all possible pairings for term1 with all possible pairings for term2
	    % generating all the possible terms with most external separator in position n
	    pairings_pos_n = get_pairs(pairings_term1, pairings_term2)
	    IN  % if n = 1, we can't generate pairings in position below n
	    	% else, we must generate pairings in position below n
		IF n = 1 THEN pairings_pos_n
		ELSE append(pairings_pos_n, gen_pairs_order_nth(arg, n-1)) 
		ENDIF     
    ENDIF 
MEASURE n

% generate all pairings of a term, preserving the order 
gen_pairs_order(arg): list[term] =
   gen_pairs_order_nth(arg, length(arg) - 1)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In this third part, the necessary functions for gen_pairs_any_order to work

% get list of arguments excluding the nth argument
get_args_without_nth(arg, n): RECURSIVE list[term] =
   IF null?(arg) THEN (::)
   ELSIF n = 0 THEN arg
   ELSIF n = 1 THEN cdr(arg)
   ELSE cons(car(arg), get_args_without_nth(cdr(arg), n - 1))
   ENDIF 
MEASURE n

% add term in the beggining of every list of terms
add_term_beg_lst_arg(t, lst_args): RECURSIVE list[list[term]] =
   IF null?(lst_args) THEN (::)
   ELSE cons(cons(t, car(lst_args)), add_term_beg_lst_arg(t, cdr(lst_args))) 
   ENDIF 
MEASURE lst_args BY << 

% generate every possible order of arguments in which the
% first element has index equal to or less than n
% The order of the IF and ELSIF must be respected, as i painfully learned in practice!
gen_args_any_order_nth(arg, n): RECURSIVE list[list[term]] =
    IF null?(arg) OR n = 0 THEN (::)
    ELSIF length(arg) = 1 THEN (:(arg):)
    ELSE LET % select nth element - the function "nth" start counting at 0
             nth_elem = nth(arg, n - 1),
             % obtain arguments without nth element
       	     new_arg = get_args_without_nth(arg, n), 
       	     % gen every list with the nth element excluded
       	     lst_args_without_nth = gen_args_any_order_nth(new_arg, length(new_arg)),
       	     % add nth element in the beggining of every list of elements obtaining by excluding n 
             lst_args_with_nth_beg = add_term_beg_lst_arg(nth_elem, lst_args_without_nth) IN  
       	     % if n is 1, then return
       	     IF n = 1 THEN lst_args_with_nth_beg
       	     % else, recursively call function to generate the possible orders with
       	     % first element equal to or less than n - 1
       	     ELSE append(gen_args_any_order_nth(arg, n - 1), lst_args_with_nth_beg)
       	     ENDIF
    ENDIF
MEASURE lex2(length(arg), n)  

% apply the function gen pairs order to a list of arguments, returning a list with all the results
apply_gen_pairs_order(lst_args): RECURSIVE list[term] =
    IF null?(lst_args) THEN (::)
    ELSE append(gen_pairs_order(car(lst_args)), apply_gen_pairs_order(cdr(lst_args)))
    ENDIF
MEASURE lst_args BY <<

% generate all pairings of a term, in any order
gen_pairs_any_order(arg): list[term] =
   LET % generate every possible order of arguments
       lst_args = gen_args_any_order_nth(arg, length(arg)) IN 
       % generate all pairings of a term for every possible order
       % by successively apply gen_pairs_order to every arg in lst_args
       apply_gen_pairs_order(lst_args)
       
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In this final part, the function the nominal AC algorithm calls: generate_unif_prb

% combine the term t with all terms in lst_terms
combine_pairs_aux(t, lst_terms): RECURSIVE list[unif_prb_typ] =
    IF null?(lst_terms) THEN (::)
    ELSE cons((t, car(lst_terms)), combine_pairs_aux(t, cdr(lst_terms)))
    ENDIF 
MEASURE lst_terms BY <<

% combine all possible pairings of term t with all possible pairings of term s,
% obtaining all possible unification problems
combine_pairs(lst_terms1, lst_terms2): RECURSIVE list[unif_prb_typ] =
    IF null?(lst_terms1) THEN (::)
    ELSE LET t = car(lst_terms1)
    	     IN append(combine_pairs_aux(t, lst_terms2), combine_pairs(cdr(lst_terms1), lst_terms2))
    ENDIF 
MEASURE lst_terms1 BY <<

% generate all possible unification problems relative to two function symbols
% the 2 terms that you receive must be AC function symbols, else the function return null 
gen_unif_prb(t, s): list[unif_prb_typ] =
    IF ac_app?(t) AND ac_app?(s) THEN 
        LET % extract arguments of both functions, put them in a list
    	arg_t = extract_arg(num_arg_fun(t, ac_sym(t)), t), 
    	arg_s = extract_arg(num_arg_fun(s, ac_sym(s)), s), 
    	% generate all pairings of t - they can be in any order
    	pairs_t_lst = gen_pairs_any_order(arg_t), 
    	% generate all pairing of s - they can be in any order
    	pairs_s_lst = gen_pairs_any_order(arg_s)
    	% combine all pairings of t with all pairings of s, returning a list of all the possibilities  
    	IN combine_pairs(pairs_t_lst, pairs_s_lst)
    ELSE (::) 
    ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%% Important functions for lemmas
% flattens an associative commutative function symbol into a term without occurences of the AC symbol
% If the AC function symbol has more than one term, a pair is returned,
% without occurences of the function symbol 
ac2pair(t, sym): RECURSIVE term =
   IF ac_app?(t) AND ac_sym(t) = sym THEN
       IF num_arg_fun(t, sym) = 1 THEN select_nth(1)(t, sym)
       ELSE pair(select_nth(1)(t, sym), ac2pair(delete_nth(1)(t, sym), sym))
       ENDIF
   ELSIF pair?(t) THEN pair(ac2pair(term1(t), sym), ac2pair(term2(t), sym)) 
   ELSE t
   ENDIF 
MEASURE t BY <<

% get a term and flattens it to a list of terms that do not contain the mentioned AC symbol 
term2list_withoutAC(t, sym): RECURSIVE list[term] =
    IF ac_app?(t) AND ac_sym(t) = sym THEN extract_arg(num_arg_fun(t, ac_sym(t)), t)
    ELSIF pair?(t) THEN append(term2list_withoutAC(term1(t), sym), term2list_withoutAC(term2(t), sym))
    ELSE (:t:)
    ENDIF 
MEASURE t BY <<

% select the first nth elements of a list. It start by the last, to match the function extract_args
select_le_n(arg, n): RECURSIVE list[term] =
   IF n = 0 OR n > length(arg) THEN (::)
   ELSE LET nth_elem_lst = (:(nth(arg, n-1)):) IN 
        append(select_le_n(arg, n-1), nth_elem_lst)
   ENDIF
MEASURE n 

list2term(lst_terms): RECURSIVE term =
   % this should never occur
   IF null?(lst_terms) THEN unit 
   ELSIF length(lst_terms) = 1 THEN car(lst_terms)
   ELSE pair(car(lst_terms), list2term(cdr(lst_terms))) 
   ENDIF 
MEASURE lst_terms BY <<

apply_list2term_and_flatten(lst_args): RECURSIVE list[term] =
   IF null?(lst_args) THEN (::)
   ELSE cons(list2term(car(lst_args)), apply_list2term_and_flatten(cdr(lst_args)))
   ENDIF 
MEASURE lst_args BY << 

%
ac2pair_in_order(t, sym): RECURSIVE term =
   IF ac_app?(t) AND ac_sym(t) = sym THEN list2term(extract_arg(num_arg_fun(t, sym), t)) 
   ELSIF pair?(t) THEN pair(ac2pair_in_order(term1(t), sym), ac2pair_in_order(term2(t), sym)) 
   ELSE t
   ENDIF 
MEASURE t BY <<

ac2pair_any_order(t, sym): RECURSIVE list[term] =
   IF ac_app?(t) AND ac_sym(t) = sym THEN
       LET arg = extract_arg(num_arg_fun(t, sym), t),
           lst_args = gen_args_any_order_nth(arg, length(arg))
	   IN apply_list2term_and_flatten(lst_args)
   ELSIF pair?(t) THEN get_pairs(ac2pair_any_order(term1(t), sym), ac2pair_any_order(term2(t), sym))
   ELSE (:t:)
   ENDIF 
MEASURE t BY << 

permutation?(arg1, arg2): RECURSIVE bool =
   IF null?(arg1) THEN null?(arg2)
   ELSE IF EXISTS (i:below[length(arg1)]):
             car(arg1) = nth(arg1, i) AND
	     permutation?(cdr(arg1), get_args_without_nth(arg2, i+1)) 
	   THEN TRUE
	ELSE FALSE
	ENDIF
   ENDIF
MEASURE arg1 BY <<  

%%%%%%%%%%%%%%%%%%%%%%%%% Important lemmas
%%%%%%%%%%%% num_arg_fun and functions must return something greater than one
num_arg_fun_ge_one: LEMMA 
   num_arg_fun(t, sym) >= 1

num_arg_fun_select: LEMMA
   num_arg_fun(select_nth(n)(t, sym), sym) = 1
   
num_arg_fun_delete: LEMMA
   num_arg_fun(t, sym) = 1 OR
   num_arg_fun(t, sym) = 1 + num_arg_fun(delete_nth(n)(t, sym), sym)

num_arg_fun_delete_unit: LEMMA
   num_arg_fun(t, sym) = 1 => delete_nth(n)(t, sym) = unit
   
delete_unit_num_arg_fun: LEMMA
   ac_app?(t) AND delete_nth(n)(t, ac_sym(t)) = unit
   => num_arg_fun(t, ac_sym(t)) = 1                               

extract_arg_ac_ge_one: LEMMA
   ac_app?(t) => 
   length(extract_arg(num_arg_fun(t, ac_sym(t)), t)) >= 1

len_term2list_withoutAC_ge_one: LEMMA
   length(term2list_withoutAC(t, sym)) >= 1 

%%%%%%%%%%% functions related with extract arg, selecth_nth and delete_nth
car_extract_arg_eq_select_first: LEMMA
    ac_app?(t) AND n > 0 => 
    car(extract_arg(n, t)) = select_nth(1)(t, ac_sym(t))

select_nth_not_pair_or_acc: LEMMA 
    s = select_nth(n)(t, sym) => 
    NOT pair?(s)
    AND NOT (ac_app?(s) AND ac_sym(s) = sym)

size_select_le_size: LEMMA
    size(select_nth(n)(t, sym)) <= size(t)
    
size_select_lt_size_ac: LEMMA
    ac_app?(t) => size(select_nth(n)(t, ac_sym(t))) < size(t)  

delete_first_preserves_symbol: LEMMA
    ac_app?(t) AND ac_app?(s) AND s = delete_nth(1)(t, ac_sym(t))
    => ac_sym(s) = ac_sym(t)
    
delete_first_reduces_size: LEMMA
    s = delete_nth(n)(t, sym) AND num_arg_fun(t, sym) > 1 
    => num_arg_fun(t, sym) = num_arg_fun(s, sym) + 1

size_delete_lt_size_ac_aux: LEMMA
    num_arg_fun(t, sym) > 1 => size(delete_nth(n)(t, sym)) < size(t)
    
size_delete_lt_size_ac: LEMMA 
    ac_app?(t) => size(delete_nth(n)(t, ac_sym(t))) < size(t) 

suf_cond_delete_is_ac: LEMMA 
    ac_app?(t) AND num_arg_fun(t, ac_sym(t)) > 1
    => ac_app?(delete_nth(n)(t, ac_sym(t)))
       AND ac_sym(delete_nth(n)(t, ac_sym(t))) = ac_sym(t)
    
extract_arg_ac_eq: LEMMA
    ac_app?(t) AND ac_app?(ac_arg(t)) AND ac_sym(t) = ac_sym(ac_arg(t)) =>
    extract_arg(n, t) = extract_arg(n, ac_arg(t))

length_equal_num_arg_fun: LEMMA 
    ac_app?(t) AND n > 0 => 
    length(extract_arg(n, t)) = n
    
select_nth_n_eq_extract_arg_nth: LEMMA
    ac_app?(t) AND n <= i AND n > 0 =>  
    select_nth(n)(t, ac_sym(t)) = nth(extract_arg(i, t), n-1)

select_nth_delete_first_eq_nplusone_aux: LEMMA
    unit = delete_nth(1)(t, sym) AND num_arg_fun(t, sym) > 1 AND n > 1
    => unit?(select_nth(n)(t, sym))
    
select_nth_delete_first_eq_nplusone: LEMMA 
    s = delete_nth(1)(t, sym) AND NOT unit?(s)  
    AND n > 0 AND n <= num_arg_fun(s, sym)  
    => select_nth(n)(s, sym) = select_nth(n + 1)(t, sym) 

extract_arg_delete_first_get_args_gt: LEMMA
    ac_app?(t) AND s = delete_nth(1)(t, ac_sym(t))
    AND ac_app?(s) AND n <= num_arg_fun(s, ac_sym(t)) 
    => extract_arg(n, s) = cdr(extract_arg(n+1, t))

%%%%%%%%%% lemmas related with get_args_gt and get_args_le
get_args_gt_is_sound: LEMMA
  arg2 = get_args_gt(append(arg1, arg2), length(arg1))

get_args_gt_not_empty: LEMMA
  n < length(arg) => length(get_args_gt(arg, n)) > 0	

len_get_args_gt: LEMMA
  IF n > length(arg) THEN length(get_args_gt(arg, n)) = 0
  ELSE length(get_args_gt(arg, n)) = length(arg) - n
  ENDIF
  
suf_cond_get_args_gt_non_empty: LEMMA
  NOT null?(arg) AND n < length(arg)
  => NOT null?(get_args_gt(arg, n)) 

get_args_gt_append: LEMMA
   n >= length(arg1)
   => get_args_gt(append(arg1, arg2), n) = get_args_gt(arg2, n - length(arg1))

get_args_gt_is_full_args: LEMMA
   arg2 = get_args_gt(append(arg1, arg2), length(arg1))
   
get_args_le_is_sound: LEMMA  
  arg1 = get_args_le(append(arg1, arg2), length(arg1))

suf_cond_get_args_le_non_empty: LEMMA
  NOT null?(arg) AND n > 0 => NOT null?(get_args_le(arg, n)) 

len_get_args_le: LEMMA
  IF n > length(arg) THEN length(get_args_le(arg, n)) = length(arg)
  ELSE length(get_args_le(arg, n)) = n
  ENDIF

get_args_le_is_full_args: LEMMA
   get_args_le(arg, length(arg)) = arg

get_args_le_append: LEMMA
   n > length(arg1)
   => get_args_le(append(arg1, arg2), n) = append(arg1, get_args_le(arg2, n - length(arg1)))

get_args_are_sound_aux: LEMMA
   length(arg) = length(append(get_args_le(arg, n), get_args_gt(arg, n)))
   
get_args_are_sound: LEMMA
   arg = append(get_args_le(arg, n), get_args_gt(arg, n))
   
%%%%%%%% lemmas for function get_pairs and combine pairs
suf_cond_pair_in_get_pairs_aux: LEMMA 
   member(t2, lst_terms2) =>
   member(pair(t1, t2), get_pairs_aux(t1, lst_terms2))

suf_cond_pair_in_get_pairs: LEMMA
    member(t1, lst_terms1) AND member(t2, lst_terms2)
    => member(pair(t1, t2), get_pairs(lst_terms1, lst_terms2))

nec_cond_pair_in_get_pairs_aux: LEMMA
    member(pair(t1, t2), get_pairs_aux(s, lst_terms2))
    => t1 = s AND member(t2, lst_terms2)
    
nec_cond_pair_in_get_pairs: LEMMA
    member(pair(t1, t2), get_pairs(lst_terms1, lst_terms2))
    => member(t1, lst_terms1) AND member(t2, lst_terms2)

get_pairs_are_pairs_aux: LEMMA
    member(t, get_pairs_aux(s, lst_terms2)) => pair?(t)
    
get_pairs_are_pairs: LEMMA
    member(t, get_pairs(lst_terms1, lst_terms2)) => pair?(t)

combine_pairs_is_correct_aux: LEMMA 
    member((t, s), combine_pairs_aux(t, lst_terms2))
    IFF member(s, lst_terms2)

combine_pairs_is_correct_aux2: LEMMA 
    member((t, s), combine_pairs_aux(t1, lst_terms2))
    => t1 = t
    
combine_pairs_is_correct: LEMMA 
    member((t, s), combine_pairs(lst_terms1, lst_terms2)) IFF
    member(t, lst_terms1)
    AND member(s, lst_terms2)

%%%%%%%%%%%% lemmas related with gen_pairs_order
gen_pairs_nth_implies_gen_pairs_nth_above: LEMMA  
    member(t, gen_pairs_order_nth(arg, n))
    AND n <= i AND i < length(arg) => 
    member(t, gen_pairs_order_nth(arg, i))

split_membership_gen_unif_prb: LEMMA 
    member((t1, s1), gen_unif_prb(t, s)) IFF
    (member(t1, gen_pairs_order(extract_arg(num_arg_fun(t, ac_sym(t)), t)))
    AND
    member(s1, gen_pairs_any_order(extract_arg(num_arg_fun(s, ac_sym(s)), s))))

suf_cond_pair_in_gen_pairs_order: LEMMA
    member(t1, gen_pairs_order(arg1)) AND member(t2, gen_pairs_order(arg2)) =>
    member(pair(t1, t2), gen_pairs_order(append(arg1, arg2)))

t_in_gen_pairs_order_t: LEMMA 
    member(t, gen_pairs_order((:t:))) 

%%%%%%%%%%%%%  lemmas related with permutation? and add_term_beg_lst_arg and get_args_without_nth
len_get_args_without_nth: CONJECTURE
    IF i = 0 OR i > length(arg) THEN length(get_args_without_nth(arg, i)) = length(arg)
    ELSE length(get_args_without_nth(arg, i)) = length(arg) - 1
    ENDIF
    
permutation?_reflexive: LEMMA
    permutation?(arg, arg)

permutation?_preserves_length: CONJECTURE
    permutation?(arg1, arg2) => length(arg1) = length(arg2)

permutation?_transitive_aux: CONJECTURE
    permutation?(arg1, arg2) =>
    EXISTS (i:below[length(arg1)]):
       nth(arg1, i) = car(arg2) AND
       permutation?(get_args_without_nth(arg1, i+1), cdr(arg2))
       
permutation?_transitive: LEMMA
    permutation?(arg1, arg2) => permutation?(arg2, arg1)

not_null_add_term_beg_lst_arg: LEMMA
    member(arg, add_term_beg_lst_arg(t, lst_args))
    => NOT null?(arg) 
    
member_add_term_beg_lst_arg: LEMMA
    NOT null?(arg) AND member(arg, add_term_beg_lst_arg(t, lst_args))
    => car(arg) = t AND member(cdr(arg), lst_args)


%%%%%%%%%%%%%% lemmas related with gen_pairs_any_order
member_gen_pairs_any_order_aux: LEMMA
    member(t, apply_gen_pairs_order(lst_args))
    =>
    EXISTS arg1:
       member(arg1, lst_args)
       AND member(t, gen_pairs_order(arg1))
 

gen_args_any_order_nth_produces_permutation: CONJECTURE
    member(arg1, gen_args_any_order_nth(arg, n))
    AND n <= length(arg) 
    => permutation?(arg, arg1)

member_gen_pairs_any_order: CONJECTURE
    member(t, gen_pairs_any_order(arg)) =>
    EXISTS arg1:
       permutation?(arg, arg1) AND member(t, gen_pairs_order(arg1)) 

%%%%%%%%%%%%% lemmas relating ac2pair and term2list_withoutAC

num_arg_fun_eq_length_term2list_withoutAC: LEMMA
    num_arg_fun(t, sym) = length(term2list_withoutAC(t, sym))

term2list_withoutAC_property1: LEMMA 
    ac_app?(t) AND num_arg_fun(t, ac_sym(t)) > 1 =>
    term2list_withoutAC(delete_nth(1)(t, ac_sym(t)), ac_sym(t)) =
    get_args_gt(term2list_withoutAC(t, ac_sym(t)), 1)
   
ac2pair_in_term2list_withoutAC: LEMMA 
    member(ac2pair(t, sym), gen_pairs_order(term2list_withoutAC(t, sym)))

select_nth_eq_nth_term2list_withoutAC: LEMMA
    n <= length(term2list_withoutAC(t, sym)) AND n > 0 
    => 
    select_nth(n)(t, sym)  =
    nth(term2list_withoutAC(t, sym), n-1)


%%%%%%%%%% aux lemmas for function select_le_n
select_le_length: LEMMA 
    n <= length(arg) => length(select_le_n(arg, n)) = n 

select_le_first: LEMMA
    0 < i AND i <= length(arg) =>
    nth(select_le_n(arg, i), 0) = nth(arg, 0) 

select_le_get_nth: LEMMA 
    i <= length(arg) => 
    FORALL n:
       n < i => nth(select_le_n(arg, i), n) = nth(arg, n) 

select_le_full_lst: LEMMA
    select_le_n(arg, length(arg)) = arg
    
END tuples
